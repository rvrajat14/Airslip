//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AllTransactionResponsePagedResult: APIModel {

    public var currentPage: Int?

    public var pageCount: Int?

    public var pageSize: Int?

    public var results: [AllTransactionResponse]?

    public var rowCount: Int?

    public var totalCount: Int?

    public init(currentPage: Int? = nil, pageCount: Int? = nil, pageSize: Int? = nil, results: [AllTransactionResponse]? = nil, rowCount: Int? = nil, totalCount: Int? = nil) {
        self.currentPage = currentPage
        self.pageCount = pageCount
        self.pageSize = pageSize
        self.results = results
        self.rowCount = rowCount
        self.totalCount = totalCount
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        currentPage = try container.decodeIfPresent("currentPage")
        pageCount = try container.decodeIfPresent("pageCount")
        pageSize = try container.decodeIfPresent("pageSize")
        results = try container.decodeArrayIfPresent("results")
        rowCount = try container.decodeIfPresent("rowCount")
        totalCount = try container.decodeIfPresent("totalCount")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(currentPage, forKey: "currentPage")
        try container.encodeIfPresent(pageCount, forKey: "pageCount")
        try container.encodeIfPresent(pageSize, forKey: "pageSize")
        try container.encodeIfPresent(results, forKey: "results")
        try container.encodeIfPresent(rowCount, forKey: "rowCount")
        try container.encodeIfPresent(totalCount, forKey: "totalCount")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AllTransactionResponsePagedResult else { return false }
      guard self.currentPage == object.currentPage else { return false }
      guard self.pageCount == object.pageCount else { return false }
      guard self.pageSize == object.pageSize else { return false }
      guard self.results == object.results else { return false }
      guard self.rowCount == object.rowCount else { return false }
      guard self.totalCount == object.totalCount else { return false }
      return true
    }

    public static func == (lhs: AllTransactionResponsePagedResult, rhs: AllTransactionResponsePagedResult) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
