//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class MatchedTransactionResponse: APIModel {

    public var aid: String?

    public var authCode: String?

    public var blogs: [BlogModel]?

    public var brandColour: String?

    public var cardScheme: String?

    public var currencyCode: String?

    public var currencySymbol: String?

    public var date: String?

    public var discount: String?

    public var id: String?

    public var lastCardDigits: String?

    public var links: [Link]?

    public var merchant: RetailerMerchantResponse?

    public var metadata: [String: Any]?

    public var operatorName: String?

    public var panSequence: String?

    public var posProvider: String?

    public var products: [ProductResponse]?

    public var promotion: PromotionModel?

    public var serviceCharge: String?

    public var subtotal: String?

    public var tid: String?

    public var time: String?

    public var total: String?

    public var transactionNumber: String?

    public var vat: String?

    public init(aid: String? = nil, authCode: String? = nil, blogs: [BlogModel]? = nil, brandColour: String? = nil, cardScheme: String? = nil, currencyCode: String? = nil, currencySymbol: String? = nil, date: String? = nil, discount: String? = nil, id: String? = nil, lastCardDigits: String? = nil, links: [Link]? = nil, merchant: RetailerMerchantResponse? = nil, metadata: [String: Any]? = nil, operatorName: String? = nil, panSequence: String? = nil, posProvider: String? = nil, products: [ProductResponse]? = nil, promotion: PromotionModel? = nil, serviceCharge: String? = nil, subtotal: String? = nil, tid: String? = nil, time: String? = nil, total: String? = nil, transactionNumber: String? = nil, vat: String? = nil) {
        self.aid = aid
        self.authCode = authCode
        self.blogs = blogs
        self.brandColour = brandColour
        self.cardScheme = cardScheme
        self.currencyCode = currencyCode
        self.currencySymbol = currencySymbol
        self.date = date
        self.discount = discount
        self.id = id
        self.lastCardDigits = lastCardDigits
        self.links = links
        self.merchant = merchant
        self.metadata = metadata
        self.operatorName = operatorName
        self.panSequence = panSequence
        self.posProvider = posProvider
        self.products = products
        self.promotion = promotion
        self.serviceCharge = serviceCharge
        self.subtotal = subtotal
        self.tid = tid
        self.time = time
        self.total = total
        self.transactionNumber = transactionNumber
        self.vat = vat
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        aid = try container.decodeIfPresent("aid")
        authCode = try container.decodeIfPresent("authCode")
        blogs = try container.decodeArrayIfPresent("blogs")
        brandColour = try container.decodeIfPresent("brandColour")
        cardScheme = try container.decodeIfPresent("cardScheme")
        currencyCode = try container.decodeIfPresent("currencyCode")
        currencySymbol = try container.decodeIfPresent("currencySymbol")
        date = try container.decodeIfPresent("date")
        discount = try container.decodeIfPresent("discount")
        id = try container.decodeIfPresent("id")
        lastCardDigits = try container.decodeIfPresent("lastCardDigits")
        links = try container.decodeArrayIfPresent("links")
        merchant = try container.decodeIfPresent("merchant")
        metadata = try container.decodeAnyIfPresent("metadata")
        operatorName = try container.decodeIfPresent("operatorName")
        panSequence = try container.decodeIfPresent("panSequence")
        posProvider = try container.decodeIfPresent("posProvider")
        products = try container.decodeArrayIfPresent("products")
        promotion = try container.decodeIfPresent("promotion")
        serviceCharge = try container.decodeIfPresent("serviceCharge")
        subtotal = try container.decodeIfPresent("subtotal")
        tid = try container.decodeIfPresent("tid")
        time = try container.decodeIfPresent("time")
        total = try container.decodeIfPresent("total")
        transactionNumber = try container.decodeIfPresent("transactionNumber")
        vat = try container.decodeIfPresent("vat")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(aid, forKey: "aid")
        try container.encodeIfPresent(authCode, forKey: "authCode")
        try container.encodeIfPresent(blogs, forKey: "blogs")
        try container.encodeIfPresent(brandColour, forKey: "brandColour")
        try container.encodeIfPresent(cardScheme, forKey: "cardScheme")
        try container.encodeIfPresent(currencyCode, forKey: "currencyCode")
        try container.encodeIfPresent(currencySymbol, forKey: "currencySymbol")
        try container.encodeIfPresent(date, forKey: "date")
        try container.encodeIfPresent(discount, forKey: "discount")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(lastCardDigits, forKey: "lastCardDigits")
        try container.encodeIfPresent(links, forKey: "links")
        try container.encodeIfPresent(merchant, forKey: "merchant")
        try container.encodeAnyIfPresent(metadata, forKey: "metadata")
        try container.encodeIfPresent(operatorName, forKey: "operatorName")
        try container.encodeIfPresent(panSequence, forKey: "panSequence")
        try container.encodeIfPresent(posProvider, forKey: "posProvider")
        try container.encodeIfPresent(products, forKey: "products")
        try container.encodeIfPresent(promotion, forKey: "promotion")
        try container.encodeIfPresent(serviceCharge, forKey: "serviceCharge")
        try container.encodeIfPresent(subtotal, forKey: "subtotal")
        try container.encodeIfPresent(tid, forKey: "tid")
        try container.encodeIfPresent(time, forKey: "time")
        try container.encodeIfPresent(total, forKey: "total")
        try container.encodeIfPresent(transactionNumber, forKey: "transactionNumber")
        try container.encodeIfPresent(vat, forKey: "vat")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? MatchedTransactionResponse else { return false }
      guard self.aid == object.aid else { return false }
      guard self.authCode == object.authCode else { return false }
      guard self.blogs == object.blogs else { return false }
      guard self.brandColour == object.brandColour else { return false }
      guard self.cardScheme == object.cardScheme else { return false }
      guard self.currencyCode == object.currencyCode else { return false }
      guard self.currencySymbol == object.currencySymbol else { return false }
      guard self.date == object.date else { return false }
      guard self.discount == object.discount else { return false }
      guard self.id == object.id else { return false }
      guard self.lastCardDigits == object.lastCardDigits else { return false }
      guard self.links == object.links else { return false }
      guard self.merchant == object.merchant else { return false }
      guard NSDictionary(dictionary: self.metadata ?? [:]).isEqual(to: object.metadata ?? [:]) else { return false }
      guard self.operatorName == object.operatorName else { return false }
      guard self.panSequence == object.panSequence else { return false }
      guard self.posProvider == object.posProvider else { return false }
      guard self.products == object.products else { return false }
      guard self.promotion == object.promotion else { return false }
      guard self.serviceCharge == object.serviceCharge else { return false }
      guard self.subtotal == object.subtotal else { return false }
      guard self.tid == object.tid else { return false }
      guard self.time == object.time else { return false }
      guard self.total == object.total else { return false }
      guard self.transactionNumber == object.transactionNumber else { return false }
      guard self.vat == object.vat else { return false }
      return true
    }

    public static func == (lhs: MatchedTransactionResponse, rhs: MatchedTransactionResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
