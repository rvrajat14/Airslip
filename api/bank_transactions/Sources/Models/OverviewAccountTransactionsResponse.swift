//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class OverviewAccountTransactionsResponse: APIModel {

    public var accountId: String?

    public var accountNickname: String?

    public var currencySymbol: String?

    public var lastCardDigits: String?

    public var links: [Link]?

    public var pagedData: OverviewAccountTransactionResponsePagedResult?

    public init(accountId: String? = nil, accountNickname: String? = nil, currencySymbol: String? = nil, lastCardDigits: String? = nil, links: [Link]? = nil, pagedData: OverviewAccountTransactionResponsePagedResult? = nil) {
        self.accountId = accountId
        self.accountNickname = accountNickname
        self.currencySymbol = currencySymbol
        self.lastCardDigits = lastCardDigits
        self.links = links
        self.pagedData = pagedData
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        accountId = try container.decodeIfPresent("accountId")
        accountNickname = try container.decodeIfPresent("accountNickname")
        currencySymbol = try container.decodeIfPresent("currencySymbol")
        lastCardDigits = try container.decodeIfPresent("lastCardDigits")
        links = try container.decodeArrayIfPresent("links")
        pagedData = try container.decodeIfPresent("pagedData")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(accountId, forKey: "accountId")
        try container.encodeIfPresent(accountNickname, forKey: "accountNickname")
        try container.encodeIfPresent(currencySymbol, forKey: "currencySymbol")
        try container.encodeIfPresent(lastCardDigits, forKey: "lastCardDigits")
        try container.encodeIfPresent(links, forKey: "links")
        try container.encodeIfPresent(pagedData, forKey: "pagedData")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? OverviewAccountTransactionsResponse else { return false }
      guard self.accountId == object.accountId else { return false }
      guard self.accountNickname == object.accountNickname else { return false }
      guard self.currencySymbol == object.currencySymbol else { return false }
      guard self.lastCardDigits == object.lastCardDigits else { return false }
      guard self.links == object.links else { return false }
      guard self.pagedData == object.pagedData else { return false }
      return true
    }

    public static func == (lhs: OverviewAccountTransactionsResponse, rhs: OverviewAccountTransactionsResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
