//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class RetailerMerchantResponse: APIModel {

    public var city: String?

    public var countryCode: String?

    public var county: String?

    public var email: String?

    public var identifier: String?

    public var logo: String?

    public var name: String?

    public var phoneNumber: String?

    public var postcode: String?

    public var storeAddress: String?

    public var storeLocationId: String?

    public var vatNumber: String?

    public var websiteUrl: String?

    public init(city: String? = nil, countryCode: String? = nil, county: String? = nil, email: String? = nil, identifier: String? = nil, logo: String? = nil, name: String? = nil, phoneNumber: String? = nil, postcode: String? = nil, storeAddress: String? = nil, storeLocationId: String? = nil, vatNumber: String? = nil, websiteUrl: String? = nil) {
        self.city = city
        self.countryCode = countryCode
        self.county = county
        self.email = email
        self.identifier = identifier
        self.logo = logo
        self.name = name
        self.phoneNumber = phoneNumber
        self.postcode = postcode
        self.storeAddress = storeAddress
        self.storeLocationId = storeLocationId
        self.vatNumber = vatNumber
        self.websiteUrl = websiteUrl
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        city = try container.decodeIfPresent("city")
        countryCode = try container.decodeIfPresent("countryCode")
        county = try container.decodeIfPresent("county")
        email = try container.decodeIfPresent("email")
        identifier = try container.decodeIfPresent("identifier")
        logo = try container.decodeIfPresent("logo")
        name = try container.decodeIfPresent("name")
        phoneNumber = try container.decodeIfPresent("phoneNumber")
        postcode = try container.decodeIfPresent("postcode")
        storeAddress = try container.decodeIfPresent("storeAddress")
        storeLocationId = try container.decodeIfPresent("storeLocationId")
        vatNumber = try container.decodeIfPresent("vatNumber")
        websiteUrl = try container.decodeIfPresent("websiteUrl")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(countryCode, forKey: "countryCode")
        try container.encodeIfPresent(county, forKey: "county")
        try container.encodeIfPresent(email, forKey: "email")
        try container.encodeIfPresent(identifier, forKey: "identifier")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(phoneNumber, forKey: "phoneNumber")
        try container.encodeIfPresent(postcode, forKey: "postcode")
        try container.encodeIfPresent(storeAddress, forKey: "storeAddress")
        try container.encodeIfPresent(storeLocationId, forKey: "storeLocationId")
        try container.encodeIfPresent(vatNumber, forKey: "vatNumber")
        try container.encodeIfPresent(websiteUrl, forKey: "websiteUrl")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? RetailerMerchantResponse else { return false }
      guard self.city == object.city else { return false }
      guard self.countryCode == object.countryCode else { return false }
      guard self.county == object.county else { return false }
      guard self.email == object.email else { return false }
      guard self.identifier == object.identifier else { return false }
      guard self.logo == object.logo else { return false }
      guard self.name == object.name else { return false }
      guard self.phoneNumber == object.phoneNumber else { return false }
      guard self.postcode == object.postcode else { return false }
      guard self.storeAddress == object.storeAddress else { return false }
      guard self.storeLocationId == object.storeLocationId else { return false }
      guard self.vatNumber == object.vatNumber else { return false }
      guard self.websiteUrl == object.websiteUrl else { return false }
      return true
    }

    public static func == (lhs: RetailerMerchantResponse, rhs: RetailerMerchantResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
