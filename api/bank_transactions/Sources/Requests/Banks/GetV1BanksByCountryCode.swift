//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension BankTransactionsApi.Banks {

    public enum GetV1BanksByCountryCode {

        public static let service = APIService<Response>(id: "getV1BanksByCountryCode", tag: "Banks", method: "GET", path: "/v1/banks/{countryCode}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var countryCode: String

                public var name: String?

                public init(countryCode: String, name: String? = nil) {
                    self.countryCode = countryCode
                    self.name = name
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetV1BanksByCountryCode.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(countryCode: String, name: String? = nil) {
                let options = Options(countryCode: countryCode, name: name)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "countryCode" + "}", with: "\(self.options.countryCode)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let name = options.name {
                  params["name"] = name
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BanksResponse

            /** Success */
            case status200(BanksResponse)

            /** Bad Request */
            case status400(ErrorResponse)

            public var success: BanksResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<BanksResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BanksResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
