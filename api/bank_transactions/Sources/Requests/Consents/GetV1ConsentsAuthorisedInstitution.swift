//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension BankTransactionsApi.Consents {

    public enum GetV1ConsentsAuthorisedInstitution {

        public static let service = APIService<Response>(id: "getV1ConsentsAuthorisedInstitution", tag: "Consents", method: "GET", path: "/v1/consents/authorised-institution", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var consent: String?

                public var institution: String?

                public var applicationUserId: String?

                public var userUuid: String?

                public init(consent: String? = nil, institution: String? = nil, applicationUserId: String? = nil, userUuid: String? = nil) {
                    self.consent = consent
                    self.institution = institution
                    self.applicationUserId = applicationUserId
                    self.userUuid = userUuid
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetV1ConsentsAuthorisedInstitution.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(consent: String? = nil, institution: String? = nil, applicationUserId: String? = nil, userUuid: String? = nil) {
                let options = Options(consent: consent, institution: institution, applicationUserId: applicationUserId, userUuid: userUuid)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let consent = options.consent {
                  params["consent"] = consent
                }
                if let institution = options.institution {
                  params["institution"] = institution
                }
                if let applicationUserId = options.applicationUserId {
                  params["application-user-id"] = applicationUserId
                }
                if let userUuid = options.userUuid {
                  params["user-uuid"] = userUuid
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Success */
            case status200

            public var success: Void? {
                switch self {
                case .status200: return ()
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = .status200
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
