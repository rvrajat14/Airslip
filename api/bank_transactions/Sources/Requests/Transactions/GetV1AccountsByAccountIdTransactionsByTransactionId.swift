//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension BankTransactionsApi.Transactions {

    public enum GetV1AccountsByAccountIdTransactionsByTransactionId {

        public static let service = APIService<Response>(id: "getV1AccountsByAccountIdTransactionsByTransactionId", tag: "Transactions", method: "GET", path: "/v1/accounts/{accountId}/transactions/{transactionId}", hasBody: false, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var accountId: String

                public var transactionId: String

                public init(accountId: String, transactionId: String) {
                    self.accountId = accountId
                    self.transactionId = transactionId
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetV1AccountsByAccountIdTransactionsByTransactionId.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(accountId: String, transactionId: String) {
                let options = Options(accountId: accountId, transactionId: transactionId)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "accountId" + "}", with: "\(self.options.accountId)").replacingOccurrences(of: "{" + "transactionId" + "}", with: "\(self.options.transactionId)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = MatchedTransactionResponse

            /** Success */
            case status200(MatchedTransactionResponse)

            /** Bad Request */
            case status400(ErrorResponse)

            /** Not Found */
            case status404(NotFoundResponse)

            public var success: MatchedTransactionResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(MatchedTransactionResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 404: self = try .status404(decoder.decode(NotFoundResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
