//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AuthenticatedUserResponse: APIModel {

    public var bearerToken: String?

    public var biometricOn: Bool?

    public var expiry: Int?

    public var isNewUser: Bool?

    public var links: [Link]?

    public var refreshToken: String?

    public init(bearerToken: String? = nil, biometricOn: Bool? = nil, expiry: Int? = nil, isNewUser: Bool? = nil, links: [Link]? = nil, refreshToken: String? = nil) {
        self.bearerToken = bearerToken
        self.biometricOn = biometricOn
        self.expiry = expiry
        self.isNewUser = isNewUser
        self.links = links
        self.refreshToken = refreshToken
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        bearerToken = try container.decodeIfPresent("bearerToken")
        biometricOn = try container.decodeIfPresent("biometricOn")
        expiry = try container.decodeIfPresent("expiry")
        isNewUser = try container.decodeIfPresent("isNewUser")
        links = try container.decodeArrayIfPresent("links")
        refreshToken = try container.decodeIfPresent("refreshToken")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(bearerToken, forKey: "bearerToken")
        try container.encodeIfPresent(biometricOn, forKey: "biometricOn")
        try container.encodeIfPresent(expiry, forKey: "expiry")
        try container.encodeIfPresent(isNewUser, forKey: "isNewUser")
        try container.encodeIfPresent(links, forKey: "links")
        try container.encodeIfPresent(refreshToken, forKey: "refreshToken")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AuthenticatedUserResponse else { return false }
      guard self.bearerToken == object.bearerToken else { return false }
      guard self.biometricOn == object.biometricOn else { return false }
      guard self.expiry == object.expiry else { return false }
      guard self.isNewUser == object.isNewUser else { return false }
      guard self.links == object.links else { return false }
      guard self.refreshToken == object.refreshToken else { return false }
      return true
    }

    public static func == (lhs: AuthenticatedUserResponse, rhs: AuthenticatedUserResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
