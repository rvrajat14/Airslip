//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension IdentityApi.UserProfile {

    public enum PostV1ProfilePhoto {

        public static let service = APIService<Response>(id: "postV1ProfilePhoto", tag: "UserProfile", method: "POST", path: "/v1/profile/photo", hasBody: true, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            public struct Options {

                public var contentDisposition: String?

                public var contentType: String?

                public var fileName: String?

                public var headers: [String: [String]]?

                public var length: Int?

                public var name: String?

                public init(contentDisposition: String? = nil, contentType: String? = nil, fileName: String? = nil, headers: [String: [String]]? = nil, length: Int? = nil, name: String? = nil) {
                    self.contentDisposition = contentDisposition
                    self.contentType = contentType
                    self.fileName = fileName
                    self.headers = headers
                    self.length = length
                    self.name = name
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: PostV1ProfilePhoto.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(contentDisposition: String? = nil, contentType: String? = nil, fileName: String? = nil, headers: [String: [String]]? = nil, length: Int? = nil, name: String? = nil) {
                let options = Options(contentDisposition: contentDisposition, contentType: contentType, fileName: fileName, headers: headers, length: length, name: name)
                self.init(options: options)
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let contentDisposition = options.contentDisposition {
                  params["ContentDisposition"] = contentDisposition
                }
                if let contentType = options.contentType {
                  params["ContentType"] = contentType
                }
                if let fileName = options.fileName {
                  params["FileName"] = fileName
                }
                if let length = options.length {
                  params["Length"] = length
                }
                if let name = options.name {
                  params["Name"] = name
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Success */
            case status204

            /** Bad Request */
            case status400(ErrorResponse)

            public var success: Void? {
                switch self {
                case .status204: return ()
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Void, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status400(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status204: return 204
                case .status400: return 400
                }
            }

            public var successful: Bool {
                switch self {
                case .status204: return true
                case .status400: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 204: self = .status204
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
